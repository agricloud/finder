/*
 * File: app/controller/BackwardTraceTreeController.js
 *
 * This file was generated by Sencha Architect version 2.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('foodprint.controller.BackwardTraceTreeController', {
    extend: 'Ext.app.Controller',

    models: [
        'TraceTree'
    ],
    stores: [
        'BackwardTraceTreeStore'
    ],
    views: [
        'BackwardTraceTreeView'
    ],

    refs: [
        {
            ref: 'backwardTraceTreeCt',
            selector: 'backwardtracetreeview'
        }
    ],

    init: function(application) {
        this.control({
            'backwardtracetreeview commontracetoolbar combo[itemId=commonBatchCombo]':{
                select:this.doSearchBatch
            },

            'backwardtracetreeview commontracetoolbar button[itemId=commonExpandallBtn]':{
                click:this.doExpandall
            },
            'backwardtracetreeview commontracetoolbar button[itemId=commonCollapseallBtn]':{
                click: this.doCollapseall
            },
            'backwardtracetreeview treepanel[itemId=backwardTraceTreePanel]':{
                beforeitemappend: this.beforeitemappend
            }
        });


    },

    doSearchBatch: function() {
        console.log("TraceTree.doSearchBatch");

        if(this.getBackwardTraceTreeCt().down('combo[itemId=commonBatchCombo]').getValue()!='') {

            var treeStore=this.getBackwardTraceTreeCt().down('treepanel[itemId=backwardTraceTreePanel]').getStore();

            Ext.Ajax.request({
                method: 'GET',
                url:'/traceTree/getBatchRoot/',
                params:{
                    'id':this.getBackwardTraceTreeCt().down('combo[itemId=commonBatchCombo]').getValue()
                },
                success:function(response,options){
                    //console.log(response);
                    //console.log(options);
                    var record = Ext.decode(response.responseText);
                    //console.log(record);
                    var root={
                        id:record.id,
                        name:record.name,
                        'item.title':record.item.title,
                        'sheet.name':record.sheet.name,
                        'sheet.typeName':record.sheet.typeName,
                        expectQty:record.expectQty,
                        'countryTitle':record.countryTitle,
                        dueDate:record.dueDate,
                        'supplier.id':record.supplier.id

                    };
                    treeStore.setRootNode(root);
                },
                callback: function(options,success,response) {

                }
            });

            /*未加入批號單據之處理方式
            var batchStore=Ext.getStore('BatchShowDeepStore');
            console.log(batchStore);
            batchStore.load({

            params:{
            'id':this.getBackwardTraceTreeCt().down('triggerfield[itemId=commonBatchTrigger]').getValue()
            },
            callback: function(records, operation, success) {
            console.log(records[0].data);
            var root={
            id:records[0].data.id,
            name:records[0].data.name,
            'item.title':records[0].data['item.title'],
            expectQty:records[0].data.expectQty,
            country:records[0].data.country,
            supplier:records[0].data.supplier
            };
            treeStore.setRootNode(root);
            }
            });
            */
        }
    },

    doExpandall: function(button, e, eOpts) {

        if(button.up().up().down('treepanel[itemId=backwardTraceTreePanel]').getRootNode()!=null) {
            var me = button.up().up().down('treepanel[itemId=backwardTraceTreePanel]');
            var toolbar = button.up('toolbar');

            me.getEl().mask('Expanding tree...');
            toolbar.disable();

            me.expandAll(function() {
                me.getEl().unmask();
                toolbar.enable();
            });
        }
    },

    doCollapseall: function(button, e, eOpts) {
        if(button.up().up().down('treepanel[itemId=backwardTraceTreePanel]').getRootNode()!=null) {
            var me = button.up().up().down('treepanel[itemId=backwardTraceTreePanel]');
            var toolbar = button.up('toolbar');

            toolbar.disable();
            me.collapseAll(function() {
                toolbar.enable();
            });
        }
    },

    beforeitemappend: function() {
        this.getBackwardTraceTreeCt().down('button[itemId=commonExpandallBtn]').setDisabled(false);
        this.getBackwardTraceTreeCt().down('button[itemId=commonCollapseallBtn]').setDisabled(false);

    }

});

/*
 * File: app/controller/BatchReportDetController.js
 *
 * This file was generated by Sencha Architect version 2.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('foodprint.controller.BatchReportDetController', {
    extend: 'Ext.app.Controller',

    mixins: {
        commonController: 'foodprint.controller.CommonController'
    },

    models: [
        'Batch',
        'BatchRotue'
    ],
    stores: [
        'BatchStore',
        'BatchRouteParamsStore',
        'BatchRouteStore'
    ],
    views: [
        'BatchReportDetView'
    ],

    refs: [
        {
            ref: 'masterGrid',
            selector: 'batchreportdetview #masterGrid'
        },
        {
            ref: 'mainGrid',
            selector: 'batchreportdetview #grid'
        },
        {
            ref: 'mainForm',
            selector: 'batchreportdetview #form'
        },
        {
            ref: 'imageUploader',
            selector: 'batchreportdetview #mainImageUploader'
        }
    ],

    init: function(application) {
        this.control({

            'batchreportdetview #index toolbar commonshowbtn':{
                click:this.doShowParams
            },
            'batchreportdetview #show toolbar commonsavebtn':{
                click:this.doSaveOrUpdate
            },
            'batchreportdetview #show toolbar commoncancelbtn':{
                click:this.doCancel
            },
            'batchreportdetview #index #masterGrid':{
                select:this.doIndexDetail
            },
            'batchreportdetview #grid':{
                select: this.enableShowBtn,
                deselect: this.disableShowBtn,
                itemdblclick: this.doShowParams
            }
        });

        this.domainName = 'batchRoute';
        this.masterKey='batch.id';
    },

    doShowParams: function() {
        console.log('batchParamsEditorController--'+'BatchReportDet'+'--doShow');

        //add Mask
        new Ext.LoadMask(this.getMainForm().up(), {store:this.getStore('BatchRouteParamsStore')});

        var that = this;

        //重新讀取批號途程資料

        this.doShow(function(success,form,action){
            var record=action.result;

            if(success){

                //重新讀取批號履歷參數資料    
                var id=-1,opid=-1,woid=-1;

                if(record){
                    id = record.data['batch.id'];
                    opid = record.data['operation.id'];
                    woid = record.data['workstation.id'];
                    spid = record.data['supplier.id'];
                }
                console.log(record);//record資料記得是舊的
                var store=that.getStore('BatchRouteParamsStore');
                store.data.clear();

                store.load({
                    params:{'batch.id':id,
                        'operation.id':opid,
                        'workstation.id':woid,
                        'supplier.id':spid
                    },
                    callback:function(records, operation, success){
                        if(success){
                            //store.clearFilter();
                            //store.filter('reportParams.operation.id',record.data['operation.id']);
                            var form=that.getMainForm();

                            form.removeAll(); 

                            for(var i=0;i<store.getCount();i++){

                                var field=null;

                                switch(store.getAt(i).data['reportParams.param.paramType']){
                                    case "INTEGER":
                                    case "FLOAT":
                                    field={
                                        xtype: 'numberfield'
                                    };
                                    break;
                                    case "STRING":
                                    field={
                                        xtype: 'textfield'
                                    };
                                    break;
                                    case "BOOLEAN":
                                    field={
                                        xtype: 'radiogroup',
                                        items: [{
                                            xtype: 'radiofield',
                                            boxLabel: 'Y',
                                            inputValue: true
                                        },
                                        {
                                            xtype: 'radiofield',
                                            boxLabel: 'N',
                                            inputValue: false
                                        }]
                                    };
                                    break;
                                    case "IMAGE":
                                    field={
                                        xtype: 'fieldcontainer',
                                        items:[{
                                            xtype: 'commonimageuploader',
                                            domainName: 'batchReportDet',
                                            domainId: store.getAt(i).data['id'],
                                            itemId: 'imageUploader'+store.getAt(i).data['id'],
                                            width:300,
                                            height:150,
                                            listeners: {
                                                render: {
                                                    fn: function(component, eOpts){
                                                        component.showToolbar();
                                                    }
                                                },
                                                afterrender: {
                                                    fn: function(component, eOpts){
                                                        component.showImage();
                                                    }
                                                }
                                            }
                                        }]
                                    };
                                    break;
                                    case "FILE":
                                    field={
                                        xtype: 'fieldcontainer',
                                        items:[{
                                            xtype: 'commonfileuploader',
                                            domainName: 'batchReportDet',
                                            domainId: store.getAt(i).data['id'],
                                            itemId: 'fileUploader'+store.getAt(i).data['id'],
                                            width:200,
                                            //height:150,
                                            listeners: {
                                                render: {
                                                    fn: function(component, eOpts){
                                                        component.showToolbar();
                                                    }
                                                },
                                                afterrender: {
                                                    fn: function(component, eOpts){
                                                        component.showFile();
                                                    }
                                                }
                                            }
                                        }]
                                    };
                                    break;
                                    break;
                                    default:
                                    console.log('error: not defined paramType'+store.getAt(i).data['reportParams.param.paramType']);
                                    break;

                                }


                                switch(store.getAt(i).data['reportParams.param.paramType']){
                                    case "INTEGER":
                                    case "FLOAT":
                                    case "STRING":   
                                    field.name = store.getAt(i).data['id'];

                                    if(store.getAt(i).data['value']==null || store.getAt(i).data['value']==''){
                                        field.value = store.getAt(i).data['reportParams.param.defaultValue'];
                                    }
                                    else{
                                        field.value = store.getAt(i).data['value'];
                                    }
                                    break;
                                    case "BOOLEAN":
                                    field.items[0].name = store.getAt(i).data['id'];
                                    field.items[1].name = store.getAt(i).data['id'];
                                    field.vertical= true;

                                    if(store.getAt(i).data['value']==null || store.getAt(i).data['value']==''){

                                        if(store.getAt(i).data['reportParams.param.defaultValue']=='true'){
                                            field.items[0].checked = true;
                                        }
                                        else{
                                            field.items[1].checked = true;
                                        }

                                    }
                                    else{
                                        if(field.value=store.getAt(i).data['value']=='true'){
                                            field.items[0].checked = true;
                                        }
                                        else{
                                            field.items[1].checked = true;
                                        }
                                    }
                                    break;
                                    case "IMAGE":
                                    //field.
                                    break;
                                    case "FILE":
                                    break;
                                    default:
                                    break;

                                }//end switch

                                field.fieldLabel = store.getAt(i).data['reportParams.param.title'];

                                form.add(field);
                            }//end for

                            //將批號途程日期加入編輯欄位
                            form.add({xtype:'numberfield',fieldLabel:'batchRoute.id',name:'id',value:record.data['id'],hidden:true});
                            form.add({xtype:'datefield',fieldLabel:Utilities.getMsg('batchRoute.startDate.label'),name:'startDate',value:record.data['startDate']});
                            form.add({xtype:'datefield',fieldLabel:Utilities.getMsg('batchRoute.endDate.label'),name:'endDate',value:record.data['endDate']});

                            //設定圖片id
                            that.setImageUploader();
                            that.activeEditor();

                            console.log(form);
                        }//end if success
                        else{
                            Ext.MessageBox.alert('Failure',operation.error);
                        }
                    }//end callback
                });//end load
            }//end if success
            else{
                console.log('doShow---Failed');
            }
        });
    },

    doSaveOrUpdate: function() {
        console.log('batchParamsEditorController--'+'BatchReportDet'+'--doSave');

        var that=this;

        this.getMainForm().getForm().submit({
            url: '/'+'batchReportDet'+'/'+'doSaveOrUpdate',
            submitEmptyText: false,
            waitMsg: Utilities.getMsg('default.message.update'),
            success: function(form,action) {
                Ext.MessageBox.alert('Success',action.result.message);
            },
            failure: function(form,action) {
                Ext.MessageBox.alert('Failure',action.result.message);
            }
        });
    }

});

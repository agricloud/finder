/*
 * File: app/view/BatchGrid.js
 *
 * This file was generated by Sencha Architect version 2.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('foodprint.view.BatchGrid', {
    extend: 'Ext.grid.Panel',
    alias: 'widget.batchgrid',

    itemId: 'batchGrid',
    store: 'BatchStore',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            viewConfig: {
                loadingText: 'Loading..'
            },
            columns: [
                {
                    xtype: 'gridcolumn',
                    hidden: true,
                    dataIndex: 'id',
                    text: 'id',
                    flex: 1
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'name',
                    text: 'name',
                    flex: 1.5
                },
                {
                    xtype: 'gridcolumn',
                    hidden: true,
                    dataIndex: 'item.id',
                    text: 'item.id',
                    flex: 1
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'item.name',
                    text: 'item.name',
                    flex: 1
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'item.title',
                    text: 'item.title',
                    flex: 1
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'item.spec',
                    text: 'item.spec',
                    flex: 1
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'item.unit',
                    text: 'item.unit',
                    flex: 1
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'item.description',
                    text: 'item.description',
                    flex: 1
                },
                {
                    xtype: 'gridcolumn',
                    hidden: true,
                    dataIndex: 'country',
                    text: 'country',
                    flex: 1
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'countryTitle',
                    text: 'countryTitle',
                    flex: 1
                },
                {
                    xtype: 'gridcolumn',
                    hidden: true,
                    dataIndex: 'supplier.id',
                    text: 'supplier.id',
                    flex: 1
                },
                {
                    xtype: 'gridcolumn',
                    hidden: true,
                    dataIndex: 'supplier.name',
                    text: 'supplier.name',
                    flex: 1
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'supplier.title',
                    text: 'supplier.title',
                    flex: 1
                },
                {
                    xtype: 'datecolumn',
                    hidden: true,
                    dataIndex: 'dueDate',
                    text: 'dueDate',
                    flex: 1,
                    format: 'Y-m-d'
                },
                {
                    xtype: 'numbercolumn',
                    dataIndex: 'expectQty',
                    text: 'expectQty',
                    flex: 1
                },
                {
                    xtype: 'datecolumn',
                    hidden: true,
                    dataIndex: 'manufactureDate',
                    text: 'manufactureDate',
                    flex: 1,
                    format: 'Y-m-d'
                },
                {
                    xtype: 'datecolumn',
                    hidden: true,
                    dataIndex: 'expirationDate',
                    text: 'expirationDate',
                    flex: 1,
                    format: 'Y-m-d'
                },
                {
                    xtype: 'gridcolumn',
                    hidden: true,
                    dataIndex: 'remark',
                    text: 'remark',
                    flex: 1
                }
            ],
            dockedItems: [
                {
                    xtype: 'pagingtoolbar',
                    dock: 'bottom',
                    displayInfo: true,
                    store: 'BatchStore'
                }
            ],
            listeners: {
                afterrender: {
                    fn: me.onBatchGridAfterRender,
                    scope: me
                }
            }
        });

        me.processBatchGrid(me);
        me.callParent(arguments);
    },

    processBatchGrid: function(config) {

        config.text=Utilities.getMsg('default.message.load');
        return Utilities.createFiltersFeature(Utilities.processConfigBundle(config, 'batch'));
    },

    onBatchGridAfterRender: function(component, eOpts) {
        component.getStore().load();
    }

});
/*
 * File: app/controller/BatchParamsCarouselController.js
 *
 * This file was generated by Sencha Architect version 2.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.2.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('foodprintTouch.controller.BatchParamsCarouselController', {
    extend: 'Ext.app.Controller',

    config: {
        models: [
            'BatchRouteDeep',
            'BatchReportDetDeep',
            'Batch'
        ],
        stores: [
            'BatchRouteDeepStore',
            'BatchRouteParamsFormStore',
            'BatchStore'
        ],
        views: [
            'BatchParamsCarousel',
            'BatchRouteParamsPanel'
        ],

        refs: {
            batchParamsCarousel: 'batchparamscarousel',
            batchRouteList: 'batchroutelist',
            batchRouteParamsPanel: 'batchrouteparamspanel'
        }
    },

    init: function(application) {

        this.control({
            'batchparamscarousel selectfield[itemId=commonBatchSelect]':{
                change:this.doIndexDetail
            },
            'batchparamscarousel list[itemId=batchRouteList]':{
                select:this.doShowParams
            },
            '#selectBatchBackToolbar button[itemId=commonBackBtn]':{
                tap:function(btn, e, eOpts){
                    history.go(0);
                }
            },
            '#batchRouteParamsBackToolbar button[itemId=commonBackBtn]':{
                tap:function(btn, e, eOpts){
                    this.getBatchParamsCarousel().previous();
                    this.getBatchRouteList().deselectAll();
                }
            },
            'batchrouteparamspanel button[itemId=commonUpdateBtn]':{
                tap:this.doSaveOrUpdate
            }
        });
    },

    doIndexDetail: function(field, newValue, oldValue, eOpts, fun) {
        console.log('BatchParamsCarouselController-doIndexDetail');

        var id=-1;
        if(field.getValue())
        id=field.getValue();

        this.getBatchRouteList().getStore().removeAll();

        this.getBatchRouteList().getStore().load({
            params:{
                'batch.id':id
            },
            callback: function(records, operation, success) {
                if(!success){
                    Ext.Msg.alert("Failed", operation['_resultSet']['_message']);
                }
            }
        });

    },

    doShowParams: function(list, record, eOpts) {
        console.log('BatchParamsCarouselController-doShow');

        var that=this;

        this.getBatchParamsCarousel().setMasked({
            xtype:'loadmask',
            message: Utilities.getMsg('default.message.load')
        });

        Ext.Ajax.request({
            url:'/batchRoute/show',
            params:{
                'id':record.data['id']
            },
            callback: function(options, success, response) {
                record = Ext.decode(response.responseText);

                if(!record.success){
                    Ext.Msg.alert("Failed", record.message);
                }
                else{

                    var store=Ext.getStore('BatchRouteParamsFormStore');

                    var id=-1,opid=-1,woid=-1;

                    if(record){
                        id=record.data['batch.id'];
                        opid=record.data['operation.id'];
                        woid=record.data['workstation.id'];
                    }

                    //重新讀取參數資料
                    store.load({
                        params:{
                            'batch.id':id,
                            'operation.id':opid,
                            'workstation.id':woid
                        },
                        callback:function(records, operation, success){
                            if(success){

                                that.getBatchParamsCarousel().remove(that.getBatchParamsCarousel().down('panel[itemId=batchRouteParamsPanel]'),true);

                                that.getBatchParamsCarousel().add({xtype:'batchrouteparamspanel'});
                                var form=that.getBatchParamsCarousel().down('formpanel[itemId=batchRouteParamsForm]');

                                store.each(function(item, index, length){

                                    var field=null;

                                    switch(item.data['reportParams__param__paramType']){
                                        case "INTEGER":
                                        case "FLOAT":
                                        field={
                                            xtype: 'numberfield'
                                        };
                                        break;
                                        case "STRING":
                                        field={
                                            xtype: 'textfield'
                                        };
                                        break;
                                        case "BOOLEAN":
                                        field={
                                            xtype: 'checkboxfield'
                                        };
                                        break;
                                        case "LIST":
                                        field={
                                            xtype: 'textfield'
                                            //xtype: 'triggerfield'
                                        };
                                        break;
                                        default:
                                        console.log('error: not defined paramType');
                                        break;
                                    }

                                    field.label= item.data['reportParams__param__title'];
                                    field.name = item.data['id'];

                                    if(item.data['value']==null || item.data['value']==''){
                                        field.value=item.data['reportParams__param__defaultValue'];
                                    }
                                    else{
                                        field.value=item.data['value'];
                                    }


                                    switch(item.data['reportParams__param__paramType']){
                                        case "INTEGER":
                                        case "FLOAT":
                                        case "STRING":
                                        case "LIST":
                                        field.listeners=[{
                                            fn: function(obj, e, eOpts){
                                                this.setValue(null);
                                            },
                                            event: 'clearicontap'
                                        }];
                                        break;
                                        case "BOOLEAN":
                                        if(field.value=='true')
                                        field.checked=true;
                                        else
                                        field.checked=false;

                                        field.listeners=[{
                                            fn: function(obj, newValue, oldValue, eOpts){
                                                if(obj.isChecked())
                                                obj.setValue(true);
                                                else
                                                obj.setValue(false);
                                            },
                                            event: 'change'
                                        }];
                                        break;
                                        //case "LIST":
                                        //    break;
                                        default:
                                        console.log('error: not defined paramType');
                                        break;
                                    }


                                    form.add(field);

                                });//end each


                                form.add({
                                    xtype:'numberfield',
                                    label:'batchRoute.id',
                                    name:'id',
                                    value:record.data['id']
                                    ,hidden:true
                                });

                                //轉換格式-製程開始日期
                                var startDate;
                                if(record.data['startDate'])
                                startDate=new Date(record.data['startDate']);
                                else
                                startDate=null;

                                form.add({
                                    xtype:'datepickerfield',
                                    label:Utilities.getMsg('batchRoute.startDate.label'),
                                    name:'startDate',
                                    value:startDate,
                                    dateFormat: 'Y-m-d',
                                    placeHolder: Utilities.getMsg('default.message.inputDate'),
                                    picker:{value:new Date(Ext.Date.format(new Date(),'Y-m-d'))}
                                });
                                //轉換格式-製程結束日期
                                var endDate;
                                if(record.data['endDate'])
                                endDate=new Date(record.data['endDate']);
                                else
                                endDate=null;

                                form.add({
                                    xtype:'datepickerfield',
                                    label:Utilities.getMsg('batchRoute.endDate.label'),
                                    name:'endDate',
                                    value:endDate,
                                    dateFormat: 'Y-m-d',
                                    placeHolder: Utilities.getMsg('default.message.inputDate'),
                                    picker:{value:new Date(Ext.Date.format(new Date(),'Y-m-d'))}
                                });

                                that.getBatchParamsCarousel().setActiveItem(that.getBatchParamsCarousel().down('panel[itemId=batchRouteParamsPanel]'));

                                // display Image
                                var commonImageUploader= that.getBatchParamsCarousel().down('commonimageuploader');

                                console.log(commonImageUploader);
                                commonImageUploader.setDomainName('batchRoute');
                                commonImageUploader.setDomainId(record.data['id']);
                                commonImageUploader.showImage();
                            }//end if success
                            else{
                                Ext.Msg.alert("Failed", operation['_resultSet']['_message']);
                            }
                            that.getBatchParamsCarousel().setMasked(false);
                        }//end callback
                    });//end store.load             
                }//end else 

            }//end callback
        });

    },

    doSaveOrUpdate: function(btn, e, eOpts) {
        console.log('BatchParamsCarouselController-doSaveOrUpdate');

        var form=this.getBatchRouteParamsPanel().down('formpanel[itemId=batchRouteParamsForm]');
        var that=this;

        form.submit({
            url:'/batchReportDet/doSaveOrUpdate',
            method: 'POST',
            waitMsg: Utilities.getMsg('default.message.update'),
            success: function(form,result) {
                Ext.Msg.alert("Success", result.message);
            },
            failure: function(form,result){
                Ext.Msg.alert("Failed", result.message);
            }

        });
    }

});